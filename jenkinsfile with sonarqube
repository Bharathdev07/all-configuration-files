pipeline {
    agent any
    options {
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '90', numToKeepStr: '3')
}
options {
  timestamps()
}
    tools{
        maven 'maven'
    }
    stages {
        stage('Build') {
            steps {
                // Get code from a GitHub repository
                git branch: 'master', url: 'https://github.com/bharah08/CI-CD-using-Docker.git'
            }
        }
          stage("build & SonarQube analysis") {
            steps {
              withSonarQubeEnv('sonar') {
                sh 'mvn clean package sonar:sonar'
              }
            }
          }
       stage("SonarQube Quality Gate"){
          steps {
            script {
               timeout(time: 5, unit: 'MINUTES') { 
               def qualitygate = waitForQualityGate() 
               if (qualitygate.status != 'OK') {
               abortPipeline:true
               error "Pipeline aborted due to quality gate failure:   ${qualitygate.status}"
                 }
               else {
               echo "Quality gate passed"
                  }
              }
           }
         }
       }
           
        }
        post {
  always {
    // One or more steps need to be included within each condition's block.
    slackSend channel: 'dev', color: 'green', message: 'check build status', teamDomain: 'devops-ok77596', tokenCredentialId: 'slack'
  }
}
    }
